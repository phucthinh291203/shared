// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/storage.proto

package protobufpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageSrv_GetPresignedPutObjectURL_FullMethodName = "/StorageSrv/GetPresignedPutObjectURL"
	StorageSrv_GetPresignedGetObjectURL_FullMethodName = "/StorageSrv/GetPresignedGetObjectURL"
	StorageSrv_CheckObjectExist_FullMethodName         = "/StorageSrv/CheckObjectExist"
)

// StorageSrvClient is the client API for StorageSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageSrvClient interface {
	GetPresignedPutObjectURL(ctx context.Context, in *GetPresignedPutObjectURLRequest, opts ...grpc.CallOption) (*GetPresignedPutObjectURLResponse, error)
	GetPresignedGetObjectURL(ctx context.Context, in *GetPresignedGetObjectURLRequest, opts ...grpc.CallOption) (*GetPresignedGetObjectURLResponse, error)
	CheckObjectExist(ctx context.Context, in *CheckObjectExistResquest, opts ...grpc.CallOption) (*CheckObjectExistResponse, error)
}

type storageSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageSrvClient(cc grpc.ClientConnInterface) StorageSrvClient {
	return &storageSrvClient{cc}
}

func (c *storageSrvClient) GetPresignedPutObjectURL(ctx context.Context, in *GetPresignedPutObjectURLRequest, opts ...grpc.CallOption) (*GetPresignedPutObjectURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPresignedPutObjectURLResponse)
	err := c.cc.Invoke(ctx, StorageSrv_GetPresignedPutObjectURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageSrvClient) GetPresignedGetObjectURL(ctx context.Context, in *GetPresignedGetObjectURLRequest, opts ...grpc.CallOption) (*GetPresignedGetObjectURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPresignedGetObjectURLResponse)
	err := c.cc.Invoke(ctx, StorageSrv_GetPresignedGetObjectURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageSrvClient) CheckObjectExist(ctx context.Context, in *CheckObjectExistResquest, opts ...grpc.CallOption) (*CheckObjectExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckObjectExistResponse)
	err := c.cc.Invoke(ctx, StorageSrv_CheckObjectExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageSrvServer is the server API for StorageSrv service.
// All implementations must embed UnimplementedStorageSrvServer
// for forward compatibility.
type StorageSrvServer interface {
	GetPresignedPutObjectURL(context.Context, *GetPresignedPutObjectURLRequest) (*GetPresignedPutObjectURLResponse, error)
	GetPresignedGetObjectURL(context.Context, *GetPresignedGetObjectURLRequest) (*GetPresignedGetObjectURLResponse, error)
	CheckObjectExist(context.Context, *CheckObjectExistResquest) (*CheckObjectExistResponse, error)
	mustEmbedUnimplementedStorageSrvServer()
}

// UnimplementedStorageSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageSrvServer struct{}

func (UnimplementedStorageSrvServer) GetPresignedPutObjectURL(context.Context, *GetPresignedPutObjectURLRequest) (*GetPresignedPutObjectURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedPutObjectURL not implemented")
}
func (UnimplementedStorageSrvServer) GetPresignedGetObjectURL(context.Context, *GetPresignedGetObjectURLRequest) (*GetPresignedGetObjectURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedGetObjectURL not implemented")
}
func (UnimplementedStorageSrvServer) CheckObjectExist(context.Context, *CheckObjectExistResquest) (*CheckObjectExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckObjectExist not implemented")
}
func (UnimplementedStorageSrvServer) mustEmbedUnimplementedStorageSrvServer() {}
func (UnimplementedStorageSrvServer) testEmbeddedByValue()                    {}

// UnsafeStorageSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageSrvServer will
// result in compilation errors.
type UnsafeStorageSrvServer interface {
	mustEmbedUnimplementedStorageSrvServer()
}

func RegisterStorageSrvServer(s grpc.ServiceRegistrar, srv StorageSrvServer) {
	// If the following call pancis, it indicates UnimplementedStorageSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageSrv_ServiceDesc, srv)
}

func _StorageSrv_GetPresignedPutObjectURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresignedPutObjectURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageSrvServer).GetPresignedPutObjectURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageSrv_GetPresignedPutObjectURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageSrvServer).GetPresignedPutObjectURL(ctx, req.(*GetPresignedPutObjectURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageSrv_GetPresignedGetObjectURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresignedGetObjectURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageSrvServer).GetPresignedGetObjectURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageSrv_GetPresignedGetObjectURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageSrvServer).GetPresignedGetObjectURL(ctx, req.(*GetPresignedGetObjectURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageSrv_CheckObjectExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckObjectExistResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageSrvServer).CheckObjectExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageSrv_CheckObjectExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageSrvServer).CheckObjectExist(ctx, req.(*CheckObjectExistResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageSrv_ServiceDesc is the grpc.ServiceDesc for StorageSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StorageSrv",
	HandlerType: (*StorageSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPresignedPutObjectURL",
			Handler:    _StorageSrv_GetPresignedPutObjectURL_Handler,
		},
		{
			MethodName: "GetPresignedGetObjectURL",
			Handler:    _StorageSrv_GetPresignedGetObjectURL_Handler,
		},
		{
			MethodName: "CheckObjectExist",
			Handler:    _StorageSrv_CheckObjectExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/storage.proto",
}
